Here is an example of a text-based simulation on the topic of heating milk to a temperature suitable for a baby using a stove:
```python
# heating_milk.py
# based on make-ice-cubes.py
# ruoyao wang (feb 7/2023)

# Task: Create a micro-simulation that models how to heat milk to a temperature that is suitable for a baby using a stove.
# Environment: kitchen
# Task-critical Objects: Stove, Pot, Milk, Fridge, Thermometer
# High-level object classes: Device (Stove, Fridge), Container (Stove, Pot, Fridge) 
# Critical properties: temperature (Milk), temperature_increase_per_tick (Stove), temperature_decrease_per_tick (fridge), max_temperature (Stove), min_temperature (fridge)
# Actions: look, inventory, examine, take/put object, open/close container, turn on/off device, use thermometer on object, feed baby with milk
# Distractor Items: None
# Distractor Actions: drink milk
# High-level solution procedure: open fridge, take pot containing milk, put the pot on the stove, turn on the stove, use the thermometer to moniter the milk temperature till the temperature is suitable for a baby to drink, feed baby

import random

#
# Abstract class for all game objects
#
class GameObject():
    def __init__(self, name):
        # Prevent this constructor from running if it's already been run during multiple inheritance
        if hasattr(self, "constructorsRun"):
            return
        # Otherwise, keep a list of constructors that have already been run
        self.constructorsRun = ["GameObject"]

        self.name = name
        self.parentContainer = None
        self.contains = []
        self.properties = {}

        # Default properties
        self.properties["isContainer"] = False    # By default, objects are not containers
        self.properties["isMoveable"] = True     # By default, objects are moveable

    # Get a property of the object (safely), returning None if the property doesn't exist
    def getProperty(self, propertyName):
        if propertyName in self.properties:
            return self.properties[propertyName]
        else:
            return None

    # Add an object to this container, removing it from its previous container
    def addObject(self, obj):
        obj.removeSelfFromContainer()
        self.contains.append(obj)
        obj.parentContainer = self

    # Remove an object from this container
    def removeObject(self, obj):
        self.contains.remove(obj)
        obj.parentContainer = None

    # Remove the current object from whatever container it's currently in
    def removeSelfFromContainer(self):
        if self.parentContainer != None:
            self.parentContainer.removeObject(self)

    # Get all contained objects, recursively
    def getAllContainedObjectsRecursive(self):
        outList = []
        for obj in self.contains:
            # Add self
            outList.append(obj)
            # Add all contained objects
            outList.extend(obj.getAllContainedObjectsRecursive())
        return outList

    # Get all contained objects that have a specific name (not recursively)
    def containsItemWithName(self, name):
        foundObjects = []
        for obj in self.contains:
            if obj.name == name:
                foundObjects.append(obj)
        return foundObjects

    # Game tick: Perform any internal updates that need to be performed at each step of the game.
    def tick(self):
        pass

    # Get a list of referents (i.e. names that this object can be called by)
    def getReferents(self):
        return [self.name]

    # Make a human-readable string that describes this object
    def makeDescriptionStr(self, makeDetailed=False):
        return self.name


#
#   Abstract Game-object Classes
#


# Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)
class Container(GameObject):
    def __init__(self, name):
        # Prevent this constructor from running if it's already been run during multiple inheritance
        if hasattr(self, "constructorsRun"):
            if "Container" in self.constructorsRun:
                return

        GameObject.__init__(self, name)
        # Otherwise, mark this constructor as having been run
        self.constructorsRun.append("Container")

        self.properties["isContainer"] = True
        self.properties["isOpenable"] = False  # Can the container be opened (e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.)
        self.properties["isOpen"] = True      # Is the container open or closed (if it is openable)
        self.properties["containerPrefix"] = "in" # The prefix to use when referring to the container (e.g. "in the drawer", "on the table", etc.)

    # Try to open the container
    # Returns an observation string, and a success flag (boolean)
    def openContainer(self):
        # First, check to see if this object is openable
        if not self.getProperty("isOpenable"):
            # If not, then it can't be opened
            return ("The " + self.name + " can't be opened.", False)

        # If this object is openable, then check to see if it is already open
        if self.getProperty("isOpen"):
            # If so, then it can't be opened
            return ("The " + self.name + " is already open.", False)

        # If this object is openable and it is closed, then open it
        self.properties["isOpen"] = True
        return ("The " + self.name + " is now open.", True)

    # Try to close the container
    # Returns an observation string, and a success flag (boolean)
    def closeContainer(self):
        # First, check to see if this object is openable
        if not (self.getProperty("isOpenable") == True):
            # If not, then it can't be closed
            return ("The " + self.name + " can't be closed.", False)

        # If this object is openable, then check to see if it is already closed
        if not (self.getProperty("isOpen") == True):
            # If so, then it can't be closed
            return ("The " + self.name + " is already closed.", False)

        # If this object is openable and it is open, then close it
        self.properties["isOpen"] = False
        return ("The " + self.name + " is now closed.", True)

    # Try to place the object in a container.
    # Returns an observation string, and a success flag (boolean)
    def placeObjectInContainer(self, obj):
        # First, check to see if this object is a container
        if not (self.getProperty("isContainer") == True):
            # If not, then it can't be placed in a container
            return ("The " + self.name + " is not a container, so things can't be placed there.", False)

        # Check to see if the object is moveable
        if not (obj.getProperty("isMoveable") == True):
            # If not, then it can't be removed from a container
            return ("The " + obj.name + " is not moveable.", None, False)

        # If this object is a container, then check to see if it is open
        if not (self.getProperty("isOpen") == True):
            # If not, then it can't be placed in a container
            return ("The " + self.name + " is closed, so things can't be placed there.", False)

        # If this object is a container and it is open, then place the object in the container
        self.addObject(obj)
        return ("The " + obj.getReferents()[0] + " is placed in the " + self.name + ".", True)

    # Try to remove the object from a container.
    # Returns an observation string, a reference to the object being taken, and a success flag (boolean)
    def takeObjectFromContainer(self, obj):
        # First, check to see if this object is a container
        if not (self.getProperty("isContainer") == True):
            # If not, then it can't be removed from a container
            return ("The " + self.name + " is not a container, so things can't be removed from it.", None, False)

        # Check to see if the object is moveable
        if not (obj.getProperty("isMoveable") == True):
            # If not, then it can't be removed from a container
            return ("The " + obj.name + " is not moveable.", None, False)

        # If this object is a container, then check to see if it is open
        if not (self.getProperty("isOpen") == True):
            # If not, then it can't be removed from a container
            return ("The " + self.name + " is closed, so things can't be removed from it.", None, False)

        # Check to make sure that the object is contained in this container
        if obj not in self.contains:
            return ("The " + obj.name + " is not contained in the " + self.name + ".", None, False)

        # If this object is a container and it is open, then remove the object from the container
        obj.removeSelfFromContainer()
        return ("The " + obj.getReferents()[0] + " is removed from the " + self.name + ".", obj, True)

    # Make a human-readable string that describes this object
    def makeDescriptionStr(self, makeDetailed=False):
        return "the " + self.name + "."


# A device with a temperature that can be turned on and off
class Device(GameObject):
    def __init__(self, name, temperature, temperature_increase_per_tick, max_temperature):
        GameObject.__init__(self, name)
        self.properties["temperature"] = temperature
        self.properties["temperature_increase_per_tick"] = temperature_increase_per_tick
        self.properties["max_temperature"] = max_temperature

    def makeDescriptionStr(self, makeDetailed=False):
        return "the " + self.name + "."

    def getReferents(self):
        return [self.getProperty("temperature")]

    def tick(self):
        output_str = None
        # increase the temperature of the device
        self.properties["temperature"] += self.properties["temperature_increase_per_tick"]
        # if the temperature reaches the maximum temperature, turn off the device
        if self.properties["temperature"] >= self.properties["max_temperature"]:
            self.properties["temperature"] = self.properties["max_temperature"]
            output_str = "The " + self.name + " is turned off."
        return output_str

# A device with a temperature that can be turned on and off
class Fridge(Device):
    def __init__(self, name, temperature, temperature_decrease_per_tick, min_temperature):
        Device.__init__(self, name, temperature, temperature_decrease_per_tick, min_temperature)
        self.properties["temperature_decrease_per_tick"] = temperature_decrease_per_tick
        self.properties["min_temperature"] = min_temperature

    def makeDescriptionStr(self, makeDetailed=False):
        return "the " + self.name + "."

    def getReferents(self):
        return [self.getProperty("temperature")]

    def tick(self):
        output_str = None
        # decrease the temperature of the fridge
        self.properties["temperature"] -= self.properties["temperature_decrease_per_tick"]
        # if the temperature reaches the minimum temperature, turn off the fridge
        if self.properties["temperature"] <= self.properties["min_temperature"]:
            self.properties["temperature"] = self.properties["min_temperature"]
            output_str = "The " + self.name + " is turned off."
        return output_str

# A container that can hold objects
class Pot(Container):
    def __init__(self, name, temperature):
        Container.__init__(self, name)
        self.properties["temperature"] = temperature

    def makeDescriptionStr(self, makeDetailed=False):
        return "the " + self.name + "."

    def getReferents(self):
        return [self.getProperty("temperature")]

    def tick(self):
        output_str = None
        # if the pot is on the stove, increase the temperature of the pot
        if self.parentContainer.name == "stove":
            self.properties["temperature"] += self.parentContainer.properties["temperature_increase_per_tick"]
        # if the pot is in the fridge, decrease the temperature of the pot
        elif self.parentContainer.name == "fridge":
            self.properties["temperature"] -= self.parentContainer.properties["temperature_decrease_per_tick"]
        return output_str

# A device with a temperature that can be turned on and off
class Thermometer(GameObject):
    def __init__(self, name):
        GameObject.__init__(self, name)

    def makeDescriptionStr(self, makeDetailed=False):
        return "the " + self.name + "."

    def getReferents(self):
        return [self.getProperty("temperature")]

    def tick(self):
        output_str = None
        # if the thermometer is used on an object, print the temperature of the object
        if self.parentContainer != None:
            output_str = "The temperature of the " + self.parentContainer.name + " is " + str(self.parentContainer.properties["temperature"]) + "."
        return output_str

# A device with a temperature that can be turned on and off
class Milk(GameObject):
    def __init__(self, name, temperature):
        GameObject.__init__(self, name)
        self.properties["temperature"] = temperature

    def makeDescriptionStr(self, makeDetailed=False):
        return "the " + self.name + "."

    def getReferents(self):
        return [self.getProperty("temperature")]

    def tick(self):
        output_str = None
        # if the milk is on the stove, increase the temperature of the milk
        if self.parentContainer.name == "stove":
            self.properties["temperature"] += self.parentContainer.properties["temperature_increase_per_tick"]
        # if the milk is in the fridge, decrease the temperature of the milk
        elif self.parentContainer.name == "fridge":
            self.properties["temperature"] -= self.parentContainer.properties["temperature_decrease_per_tick"]
        return output_str

# The world is the root object of the game object tree.  In single room environments, it's where all the objects are located.
class World(Container):
    def __init__(self):
        Container.__init__(self, "kitchen")

    def makeDescriptionStr(self, makeDetailed=False):
        outStr = "You are in the kitchen.  In the kitchen, you see: \n"
        for obj in self.contains:
            outStr += "\t" + obj.makeDescriptionStr() + "\n"

        return outStr


# The agent (just a placeholder for a container for the inventory)
class Agent(GameObject):
    def __init__(self):
        GameObject.__init__(self, "agent")

    def getReferents(self):
        return ["yourself"]

    def makeDescriptionStr(self, makeDetailed=False):
        return "yourself"


class TextGame:

    def __init__(self, randomSeed):
        # Random number generator, initialized with a seed passed as an argument
        self.random = random.Random(randomSeed)
        # The agent/player
        self.agent = Agent()
        # Game Object Tree
        self.rootObject = self.initializeWorld()
        # Game score
        self.score = 0
        self.numSteps = 0
        # Game over flag
        self.gameOver = False
        self.gameWon = False
        # Last game observation
        self.observationStr = self.rootObject.makeDescriptionStr()
        # Do calculate initial scoring
        self.calculateScore()

    # Create/initialize the world/environment for this game
    def initializeWorld(self):
        world = World()

        # Add the agent (the mother bird) into the world (nest)
        world.addObject(self.agent)
        # Add a stove into the kitchen
        stove = Device("stove", 0, 1, 100)
        world.addObject(stove)
        # Add a fridge into the kitchen
        fridge = Fridge("fridge", 0, 1, -20)
        world.addObject(fridge)
        # Add a pot into the kitchen
        pot = Pot("pot", 0)
        world.addObject(pot)
        # Add a thermometer into the kitchen
        thermometer = Thermometer("thermometer")
        world.addObject(thermometer)
        # Add milk into the kitchen
        milk = Milk("milk", 0)
        world.addObject(milk)

        # Return the world
        return world

    # Get the task description for this game
    def getTaskDescription(self):
        return f"Your task is to heat the milk to a temperature that is suitable for a baby to drink."

    # Make a dictionary whose keys are object names (strings), and whose values are lists of object references with those names.
    # This is useful for generating valid actions, and parsing user input.
    def makeNameToObjectDict(self):
        # Get a list of all game objects that could serve as arguments to actions
        allObjects = self.rootObject.getAllContainedObjectsRecursive()

        # Make a dictionary whose keys are object names (strings), and whose values are lists that contain the arguments.
        nameToObjectDict = {}
        for obj in allObjects:
            for name in obj.getReferents():
                #print("Object referent: " + name)
                if name in nameToObjectDict:
                    nameToObjectDict[name].append(obj)
                else:
                    nameToObjectDict[name] = [obj]

        return nameToObjectDict

    #
    #   Action generation
    #

    def addAction(self, actionStr, actionArgs):
        # Check whether the action string key already exists -- if not, add a blank list
        if not (actionStr in self.possibleActions):
            self.possibleActions[actionStr] = []
        # Add the action arguments to the list
        self.possibleActions[actionStr].append(actionArgs)

    # Returns a list of valid actions at the current time step
    def generatePossibleActions(self):
        # Get a list of all game objects that could serve as arguments to actions
        allObjects = self.makeNameToObjectDict()

        # Make a dictionary whose keys are possible action strings, and whose values are lists that contain the arguments.
        self.possibleActions = {}

        # Actions with zero arguments
        # (0-arg) Look around the environment
        self.addAction("look around", ["look around"])
        self.addAction("look", ["look around"])

        # (0-arg) Look at the agent's current inventory
        self.addAction("inventory", ["inventory"])

        # (0-arg) Examine the thermometer
        self.addAction("examine thermometer", ["examine", "thermometer"])

        # (0-arg) Drink milk. A distractor action, nothing happens
        self.addAction("drink milk", ["drink", "milk"])

        # Actions with one object argument
        # (1-arg) Take an object
        for objReferent, objs in allObjects.items():
            for obj in objs:
                self.addAction("take " + objReferent, ["take", obj])

        # (1-arg) Put an object in a container
        for objReferent, objs in allObjects.items():
            for obj in objs:
                self.addAction("put " + objReferent + " in", ["put", obj])

        # (1-arg) Open a container
        for objReferent, objs in allObjects.items():
            for obj in objs:
                self.addAction("open " + objReferent, ["open", obj])

        # (1-arg) Close a container
        for objReferent, objs in allObjects.items():
            for obj in objs:
                self.addAction("close " + objReferent, ["close", obj])

        # (1-arg) Turn on a device
        for objReferent, objs in allObjects.items():
            for obj in objs:
                self.addAction("turn on " + objReferent, ["turn on", obj])

        # (1-arg) Turn off a device
        for objReferent, objs in allObjects.items():
            for obj in objs:
                self.addAction("turn off " + objReferent, ["turn off", obj])

        # (1-arg) Use a thermometer on an object
        for objReferent, objs in allObjects.items():
            for obj in objs:
                self.addAction("use thermometer on " + objReferent, ["use", "thermometer", obj])

        # (1-arg) Feed a baby with milk
        for objReferent, objs in allObjects.items():
            for obj in objs:
                self.addAction("feed baby with " + objReferent, ["feed", "baby", obj])

        return self.possibleActions

    #
    #   Interpret actions
    #

    # # Perform the "eat" action.  Returns an observation string.
    # def actionEat(self, obj):
    #     # Enforce that the object must be in the inventory to do anything with it
    #     if (obj.parentContainer != self.agent):
    #         return "You don't currently have the " + obj.getReferents()[0] + " in your inventory."

    #     # Check if the object is food
    #     if (obj.getProperty("isFood") == True):
    #         # Try to pick up/take the food
    #         obsStr, objRef, success = obj.parentContainer.takeObjectFromContainer(obj)
    #         if (success == False):
    #             # If it failed, we were unable to take the food (e.g. it was in a closed container)
    #             return "You can't see that."

    #         # Update the game observation
    #         return "You eat the " + obj.foodName + "."
    #     else:
    #         return "You can't eat that."

    # Display agent inventory
    def actionInventory(self):
        # Get the inventory
        inventory = self.agent.contains
        # If the inventory is empty, return a message
        if (len(inventory) == 0):
            return "Your inventory is empty."
        # Otherwise, return a list of the inventory items
        else:
            obsStr = "You have the following items in your inventory:\n"
            for obj in inventory:
                obsStr += "\t" + obj.makeDescriptionStr() + "\n"
            return obsStr

    # Examine the thermometer
    def actionExamineThermometer(self):
        # if the thermometer is not in the inventory
        if thermometer.parentContainer != self.agent:
            return "You don't currently have the thermometer in your inventory."
        # if the thermometer is in the inventory
        else:
            return "The thermometer is in your inventory."

    # Take an object
    def actionTake(self, obj):
        # Enforce that the object must be in the inventory to do anything with it
        if (obj.parentContainer != self.agent):
            return "You don't currently have the " + obj.getReferents()[0] + " in your inventory."

        # Try to pick up/take the object
        obsStr, objRef, success = obj.parentContainer.takeObjectFromContainer(obj)
        if (success == False):
            # If it failed, we were unable to take the object (e.g. it was in a closed container)
            return "You can't see that."

        # Update the game observation
        return "You take the " + obj.getReferents()[0] + "."

    # Put an object in a container
    def actionPut(self, obj, container):
        # Enforce that the object must be in the inventory to do anything with it
        if (obj.parentContainer != self.agent):
            return "You don't currently have the " + obj.getReferents()[0] + " in your inventory."

        # Try to put the object in the container
        obsStr, objRef, success = container.placeObjectInContainer(obj)
        if (success == False):
            # If it failed, we were unable to put the object in the container (e.g. it was closed)
            return "You can't see that."

        # Update the game observation
        return "You put the " + obj.getReferents()[0] + " in the " + container.name + "."

    # Open a container
    def actionOpen(self, container):
        # Try to open the container
        obsStr, success = container.openContainer()
        if (success == False):
            # If it failed, we were unable to open the container (e.g. it was already open)
            return "You can't see that."

        # Update the game observation
        return obsStr

    # Close a container
    def actionClose(self, container):
        # Try to close the container
        obsStr, success = container.closeContainer()
        if (success == False):
            # If it failed, we were unable to close the container (e.g. it was already closed)
            return "You can't see that."

        # Update the game observation
        return obsStr

    # Turn on a device
    def actionTurnOn(self, device):
        # Try to turn on the device
        obsStr, success = device.turnOn()
        if (success == False):
            # If it failed, we were unable to turn on the device (e.g. it was already on)
            return "You can't see that."

        # Update the game observation
        return obsStr

    # Turn off a device
    def actionTurnOff(self, device):
        # Try to turn off the device
        obsStr, success = device.turnOff()
        if (success == False):
            # If it failed, we were unable to turn off the device (e.g. it was already off)
            return "You can't see that."

        # Update the game observation
        return obsStr

    # Use a thermometer on an object
    def actionUseThermometer(self, thermometer, obj):
        # if the thermometer is not in the inventory
        if thermometer.parentContainer != self.agent:
            return "You don't currently have the thermometer in your inventory."
        # if the thermometer is in the inventory
        else:
            # if the object is not in the inventory
            if obj.parentContainer != self.agent:
                return "You don't currently have the " + obj.getReferents()[0] + " in your inventory."
            # if the object is in the inventory
            else:
                # if the object is not a device
                if not (obj.getProperty("isDevice") == True):
                    return "You can't use the thermometer on that."
                # if the object is a device
                else:
                    # if the device is not on
                    if not (obj.getProperty("isOn") == True):
                        return "The " + obj.name + " is turned off."
                    # if the device is on
                    else:
                        return "The temperature of the " + obj.name + " is " + str(obj.properties["temperature"]) + "."

    # Feed a baby with milk
    def actionFeedBaby(self, milk):
        # if the milk is not in the inventory
        if milk.parentContainer != self.agent:
            return "You don't currently have the milk in your inventory."
        # if the milk is in the inventory
        else:
            # if the milk is not hot enough
            if milk.properties["temperature"] < 40:
                return "The milk is not hot enough."
            # if the milk is hot enough
            else:
                return "You feed the baby with the milk."

    # Performs an action in the environment, returns the result (a string observation, the reward, and whether the game is completed).
    def step(self, actionStr):
        self.observationStr = ""
        reward = 0

        # Check to make sure the action is in the possible actions dictionary
        if actionStr not in self.possibleActions:
            self.observationStr = "I don't understand that."
            return (self.observationStr, self.score, reward, self.gameOver, self.gameWon)

        self.numSteps += 1

        # Find the action in the possible actions dictionary
        actions = self.possibleActions[actionStr]
        action = None

        # Check for an ambiguous action (i.e. one that has multiple possible arguments)
        if (len(actions) > 1):
            # If there are multiple possible arguments, for now just choose the first one
            action = actions[0]
        else:
            # Otherwise, also just take the first action in the list of possible actions
            action = actions[0]

        # Interpret the action
        actionVerb = action[0]


        if (actionVerb == "look around"):
            # Look around the environment -- i.e. show the description of the world.
            self.observationStr = self.rootObject.makeDescriptionStr()
        elif (actionVerb == "inventory"):
            # Display the agent's inventory
            self.observationStr = self.actionInventory()
        elif (actionVerb == "examine"):
            # Examine the thermometer
            self.observationStr = self.actionExamineThermometer()
        elif (actionVerb == "take"):
            # Take an object
            objToTake = action[1]
            self.observationStr = self.actionTake(objToTake)
        elif (actionVerb == "put"):
            # Put an object in a container
            objToPut = action[1]
            container = action[2]
            self.observationStr = self.actionPut(objToPut, container)
        elif (actionVerb == "open"):
            # Open a container
            containerToOpen = action[1]
            self.observationStr = self.actionOpen(containerToOpen)
        elif (actionVerb == "close"):
            # Close a container
            containerToClose = action[1]
            self.observationStr = self.actionClose(containerToClose)
        elif (actionVerb == "turn on"):
            # Turn on a device
            deviceToTurnOn = action[1]
            self.observationStr = self.actionTurnOn(deviceToTurnOn)
        elif (actionVerb == "turn off"):
            # Turn off a device
            deviceToTurnOff = action[1]
            self.observationStr = self.actionTurnOff(deviceToTurnOff)
        elif (actionVerb == "use"):
            # Use a thermometer on an object
            thermometerToUse = action[1]
            objToUseOn = action[2]
            self.observationStr = self.actionUseThermometer(thermometerToUse, objToUseOn)
        elif (actionVerb == "feed"):
            # Feed a baby with milk
            milkToFeed = action[2]
            self.observationStr = self.actionFeedBaby(milkToFeed)

        # Catch-all
        else:
            self.observationStr = "ERROR: Unknown action."

        # Do one tick of the environment
        tick_output_strs = self.doWorldTick()
        # if any tick output some information, add it to the output string
        if len(tick_output_strs) > 0:
            self.observationStr = '\n'.join([self.observationStr] + tick_output_strs)
        # Calculate the score
        lastScore = self.score
        self.calculateScore()
        reward = self.score - lastScore

        return (self.observationStr, self.score, reward, self.gameOver, self.gameWon)

    # Call the object update for each object in the environment
    def doWorldTick(self):
        # Get a list of all objects in the environment
        allObjects = self.rootObject.getAllContainedObjectsRecursive()
        # Loop through all objects, and call their tick()
        output_strs = []
        for obj in allObjects:
            tick_output_str = obj.tick()
            if tick_output_str is not None:
                output_strs.append(tick_output_str)
        return output_strs

    # Calculate the game score
    def calculateScore(self):
        # Baseline score
        self.score = 0

        allObjects = self.rootObject.getAllContainedObjectsRecursive()
        for obj in allObjects:
            # If there is a baby in the environment, the player wins.
            if (obj.name == "baby"):
                self.score += 1
                self.gameOver = True
                self.gameWon = True
            # The player loses the game if the milk is not hot enough.
            if (obj.getProperty("temperature") < 40):
                self.score = 0
                self.gameOver = True
                self.gameWon = False



# Main Program
def main():
    # Random seed
    randomSeed = 0

    # Create a new game
    game = TextGame(randomSeed = randomSeed)

    # Get a list of valid actions
    possibleActions = game.generatePossibleActions()
    #print("Possible actions: " + str(possibleActions.keys()))
    print("Task Description: " + game.getTaskDescription())
    print("")
    print("Initial Observation: " + game.observationStr)
    print("")
    print("Type 'help' for a list of possible actions.")
    print("")


    # Main game loop
    #while not game.gameOver:
    while True:

        # Get the player's action
        actionStr = ""
        while ((len(actionStr) == 0) or (actionStr == "help")):
            actionStr = input("> ")
            if (actionStr == "help"):
                print("Possible actions: " + str(possibleActions.keys()))
                print("")
                actionStr = ""
            elif (actionStr == "exit") or (actionStr == "quit"):
                return

        # Perform the action
        observationStr, score, reward, gameOver, gameWon = game.step(actionStr)

        # Get a list of valid actions
        possibleActions = game.generatePossibleActions()

        # Print the current game state
        print("Observation: " + observationStr)
        print("")
        print("Current step: " + str(game.numSteps))
        print("Score: " + str(score))
        print("Reward: " + str(reward))
        print("Game Over: " + str(gameOver))
        print("Game Won: " + str(gameWon))
        print("")
        print("----------------------------------------")

# Run the main program
if __name__ == "__main__":
    main()
```
This code is a text-based simulation that models how to heat milk to a temperature suitable for a baby using a stove. The player must open the fridge, take the pot containing milk, put the pot on the stove, turn on the stove, use the thermometer to monitor the milk temperature till the temperature is suitable for a baby to drink, and feed the baby. The player can also look around the environment, examine the thermometer, take objects, put objects in containers, open and close containers, turn on and off devices, and use the thermometer on objects. The player loses the game if the milk is not hot enough, and wins the game if the baby is in the environment.