Here is an example of a text-based simulation on the topic of burying a treasure box using a shovel:
```python
# bury_treasure.py
# based on metal-detector.py
# ruoyao wang (apr 29/2023)

# Task Description: Create a micro-simulation that models how to bury a treasure box using a shovel
# Environment: garden
# Task-critical Objects: Tool, Soil, TreasureBox, Hole
# High-level object classes: Container (Hole)
# Critical properties: None
# Actions: look, inventory, examine, take/put object, dig with tool
# Distractor Items: Tool
# Distractor Actions: None
# High-level solution procedure: take shovel, dig with shovel, take treasure box, put treasure box in hole, put soil in hole

import random

#
# Abstract class for all game objects
#
class GameObject():
    def __init__(self, name):
        # Prevent this constructor from running if it's already been run during multiple inheritance
        if hasattr(self, "constructorsRun"):
            return
        # Otherwise, keep a list of constructors that have already been run
        self.constructorsRun = ["GameObject"]

        self.name = name
        self.parentContainer = None
        self.contains = []
        self.properties = {}

        # Default properties
        self.properties["isContainer"] = False    # By default, objects are not containers
        self.properties["isMoveable"] = True     # By default, objects are moveable

    # Get a property of the object (safely), returning None if the property doesn't exist
    def getProperty(self, propertyName):
        if propertyName in self.properties:
            return self.properties[propertyName]
        else:
            return None

    # Add an object to this container, removing it from its previous container
    def addObject(self, obj):
        obj.removeSelfFromContainer()
        self.contains.append(obj)
        obj.parentContainer = self

    # Remove an object from this container
    def removeObject(self, obj):
        self.contains.remove(obj)
        obj.parentContainer = None

    # Remove the current object from whatever container it's currently in
    def removeSelfFromContainer(self):
        if self.parentContainer != None:
            self.parentContainer.removeObject(self)

    # Get all contained objects, recursively
    def getAllContainedObjectsRecursive(self):
        outList = []
        for obj in self.contains:
            # Add self
            outList.append(obj)
            # Add all contained objects
            outList.extend(obj.getAllContainedObjectsRecursive())
        return outList

    # Get all contained objects that have a specific name (not recursively)
    def containsItemWithName(self, name):
        foundObjects = []
        for obj in self.contains:
            if obj.name == name:
                foundObjects.append(obj)
        return foundObjects

    # Game tick: Perform any internal updates that need to be performed at each step of the game.
    def tick(self):
        pass

    # Get a list of referents (i.e. names that this object can be called by)
    def getReferents(self):
        return [self.name]

    # Make a human-readable string that describes this object
    def makeDescriptionStr(self, makeDetailed=False):
        return f"a {self.name}"

#
#   Abstract Game-object Classes
#


# Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)
class Container(GameObject):
    def __init__(self, name):
        # Prevent this constructor from running if it's already been run during multiple inheritance
        if hasattr(self, "constructorsRun"):
            if "Container" in self.constructorsRun:
                return

        GameObject.__init__(self, name)
        # Otherwise, mark this constructor as having been run
        self.constructorsRun.append("Container")

        self.properties["isContainer"] = True
        self.properties["isOpenable"] = False  # Can the container be opened (e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.)
        self.properties["isOpen"] = True      # Is the container open or closed (if it is openable)
        self.properties["containerPrefix"] = "in" # The prefix to use when referring to the container (e.g. "in the drawer", "on the table", etc.)

    # Try to open the container
    # Returns an observation string, and a success flag (boolean)
    def openContainer(self):
        # First, check to see if this object is openable
        if not self.getProperty("isOpenable"):
            # If not, then it can't be opened
            return ("The " + self.name + " can't be opened.", False)

        # If this object is openable, then check to see if it is already open
        if self.getProperty("isOpen"):
            # If so, then it can't be opened
            return ("The " + self.name + " is already open.", False)

        # If this object is openable and it is closed, then open it
        self.properties["isOpen"] = True
        return ("The " + self.name + " is now open.", True)

    # Try to close the container
    # Returns an observation string, and a success flag (boolean)
    def closeContainer(self):
        # First, check to see if this object is openable
        if not (self.getProperty("isOpenable") == True):
            # If not, then it can't be closed
            return ("The " + self.name + " can't be closed.", False)

        # If this object is openable, then check to see if it is already closed
        if not (self.getProperty("isOpen") == True):
            # If so, then it can't be closed
            return ("The " + self.name + " is already closed.", False)

        # If this object is openable and it is open, then close it
        self.properties["isOpen"] = False
        return ("The " + self.name + " is now closed.", True)

    # Try to place the object in a container.
    # Returns an observation string, and a success flag (boolean)
    def placeObjectInContainer(self, obj):
        # First, check to see if this object is a container
        if not (self.getProperty("isContainer") == True):
            # If not, then it can't be placed in a container
            return ("The " + self.name + " is not a container, so things can't be placed there.", False)

        # Check to see if the object is moveable
        if not (obj.getProperty("isMoveable") == True):
            # If not, then it can't be removed from a container
            return ("The " + obj.name + " is not moveable.", None, False)

        # If this object is a container, then check to see if it is open
        if not (self.getProperty("isOpen") == True):
            # If not, then it can't be placed in a container
            return ("The " + self.name + " is closed, so things can't be placed there.", False)

        # If this object is a container and it is open, then place the object in the container
        self.addObject(obj)
        return ("The " + obj.getReferents()[0] + " is placed in the " + self.name + ".", True)

    # Try to remove the object from a container.
    # Returns an observation string, a reference to the object being taken, and a success flag (boolean)
    def takeObjectFromContainer(self, obj):
        # First, check to see if this object is a container
        if not (self.getProperty("isContainer") == True):
            # If not, then it can't be removed from a container
            return ("The " + self.name + " is not a container, so things can't be removed from it.", None, False)

        # Check to see if the object is moveable
        if not (obj.getProperty("isMoveable") == True):
            # If not, then it can't be removed from a container
            return ("The " + obj.name + " is not moveable.", None, False)

        # If this object is a container, then check to see if it is open
        if not (self.getProperty("isOpen") == True):
            # If not, then it can't be removed from a container
            return ("The " + self.name + " is closed, so things can't be removed from it.", None, False)

        # Check to make sure that the object is contained in this container
        if obj not in self.contains:
            return ("The " + obj.name + " is not contained in the " + self.name + ".", None, False)

        # If this object is a container and it is open, then remove the object from the container
        obj.removeSelfFromContainer()
        return ("The " + obj.getReferents()[0] + " is removed from the " + self.name + ".", obj, True)

    # Make a human-readable string that describes this object
    def makeDescriptionStr(self, makeDetailed=False):
        return "a " + self.name

# A room
class Room(Container):
    def __init__(self, name):
        GameObject.__init__(self, name)
        Container.__init__(self, name)
        self.properties["isMoveable"] = False
        self.connects = {"north": None, "east": None, "south": None, "west": None} # other rooms that this room connects to
        self.buried = [] # objects buried in this room

    # bury an object in this "room"
    def bury(self, obj):
        super().addObject(obj)
        self.buried.append(obj)

    def makeDescriptionStr(self, makeDetailed=False):
        outStr = f"You find yourself on a {self.name}.  on the {self.name}, you see: \n"
        for obj in self.contains:
            if obj not in self.buried:
                outStr += "\t" + obj.makeDescriptionStr() + "\n"

        return outStr

    # connect to another room
    def connect(self, room, direction):
        self.connects[direction] = room
        if direction == "north":
            couter_direction = "south"
        elif direction == "east":
            couter_direction = "west"
        elif direction == "south":
            couter_direction = "north"
        elif direction == "west":
            couter_direction = "east"

        room.connects[couter_direction] = self

# An item buried
class Item(GameObject):
    def __init__(self, name, isMetal=False):
        GameObject.__init__(self, name)
        self.properties["isMetal"] = isMetal

# Shovel
class Shovel(GameObject):
    def __init__(self, name, durability=1):
        GameObject.__init__(self, name)
        self.properties["durability"] = durability # number of times the shovel can dig before broken

    def makeDescriptionStr(self, makeDetailed=False):
        if self.properties["durability"] == 0:
            return f"a broken {self.name}"
        else:
            return f"a {self.name}"

# A hole
class Hole(Container):
    def __init__(self, name):
        GameObject.__init__(self, name)
        Container.__init__(self, name)
        self.properties["isContainer"] = True
        self.properties["isOpenable"] = False
        self.properties["isOpen"] = True
        self.properties["containerPrefix"] = "in"

    def makeDescriptionStr(self, makeDetailed=False):
        return "a " + self.name

# The world is the root object of the game object tree.
class World(Container):
    def __init__(self):
        Container.__init__(self, "garden")

    # Describe the a room
    def makeDescriptionStr(self, room, makeDetailed=False):
        outStr = room.makeDescriptionStr()
        # describe room connection information
        outStr += "You also see:\n"
        for direction in room.connects:
            if room.connects[direction] is not None:
                outStr += f"\t a way to {direction}\n"

        return outStr

# The agent
class Agent(Container):
    def __init__(self):
        GameObject.__init__(self, "agent")
        Container.__init__(self, "agent")

    def getReferents(self):
        return ["yourself"]

    def makeDescriptionStr(self, makeDetailed=False):
        return "yourself"


class TextGame:

    def __init__(self, randomSeed):
        # Random number generator, initialized with a seed passed as an argument
        self.random = random.Random(randomSeed)
        # The agent/player
        self.agent = Agent()
        # Game Object Tree
        self.rootObject = self.initializeWorld()
        # Game score
        self.score = 0
        self.numSteps = 0
        # Game over flag
        self.gameOver = False
        self.gameWon = False
        # Last game observation
        self.observationStr = self.rootObject.makeDescriptionStr(self.current_room)
        # Do calculate initial scoring
        self.calculateScore()

    # Create/initialize the world/environment for this game
    def initializeWorld(self):
        world = World()

        # Build a 3*3 garden map
        garden_map = [[],[],[]]
        for i in range(3):
            for _ in range(3):
                room = Room("garden")
                garden_map[i].append(room)
                world.addObject(room)
        # Connects the rooms
        for i in range(3):
            for j in range(3):
                if i + 1 < 3:
                    garden_map[i][j].connect(garden_map[i+1][j], "south")
                if j + 1 < 3:
                    garden_map[i][j].connect(garden_map[i][j+1], "east")

        # randomly select the agent's initial position and where items are buried
        positions = self.random.choices(range(9), k=5)

        # add agent
        agent_init_position = (positions[0] // 3, positions[0] % 3)
        garden_map[agent_init_position[0]][agent_init_position[1]].addObject(self.agent)
        self.current_room = garden_map[agent_init_position[0]][agent_init_position[1]]

        # add the target
        treasure_box = Item("treasure box")
        garden_map[positions[1]//3][positions[1]%3].bury(treasure_box)

        # add distractors
        possible_items = ["rock", "stick", "leaf", "flower", "grass"]
        self.random.shuffle(possible_items)
        for i in range(3):
            garden_map[positions[i+2]//3][positions[i+2]%3].bury(Item(possible_items[i]))

        # add a shovel
        shovel = Shovel("shovel")
        garden_map[agent_init_position[0]][agent_init_position[1]].addObject(shovel)

        # add a hole
        hole = Hole("hole")
        garden_map[agent_init_position[0]][agent_init_position[1]].addObject(hole)

        # Return the world
        return world

    # Get the task description for this game
    def getTaskDescription(self):
        return "Your task is to bury the treasure box in the hole. You win the game by putting the treasure box in the hole."

    # Make a dictionary whose keys are object names (strings), and whose values are lists of object references with those names.
    # This is useful for generating valid actions, and parsing user input.
    def makeNameToObjectDict(self):
        # Get a list of all game objects that could serve as arguments to actions
        allObjects = self.current_room.getAllContainedObjectsRecursive()

        # Make a dictionary whose keys are object names (strings), and whose values are lists of object references with those names.
        nameToObjectDict = {}
        for obj in allObjects:
            if obj not in self.current_room.buried:
                for name in obj.getReferents():
                    #print("Object referent: " + name)
                    if name in nameToObjectDict:
                        nameToObjectDict[name].append(obj)
                    else:
                        nameToObjectDict[name] = [obj]

        return nameToObjectDict

    #
    #   Action generation
    #

    def addAction(self, actionStr, actionArgs):
        # Check whether the action string key already exists -- if not, add a blank list
        if not (actionStr in self.possibleActions):
            self.possibleActions[actionStr] = []
        # Add the action arguments to the list
        self.possibleActions[actionStr].append(actionArgs)

    # Returns a list of valid actions at the current time step
    def generatePossibleActions(self):
        # Get a list of all game objects that could serve as arguments to actions
        allObjects = self.makeNameToObjectDict()

        # Make a dictionary whose keys are possible action strings, and whose values are lists that contain the arguments.
        self.possibleActions = {}

        # Actions with zero arguments
        # (0-arg) Look around the environment
        self.addAction("look around", ["look around"])
        self.addAction("look", ["look around"])

        # (0-arg) Look at the agent's current inventory
        self.addAction("inventory", ["inventory"])

        # Actions with one object argument
        # (1-arg) Take
        for objReferent, objs in allObjects.items():
            for obj in objs:
                self.addAction("take " + objReferent, ["take", obj])

        # (1-arg) Move
        for direction, room in self.current_room.connects.items():
            if room is not None:
                self.addAction("move " + direction, ["move", direction])

        # (1-arg) Examine
        for objReferent, objs in allObjects.items():
            for obj in objs:
                self.addAction("examine " + objReferent, ["examine", obj])

        # Actions with two object arguments
        # (2-arg) Put
        for objReferent1, objs1 in allObjects.items():
            for objReferent2, objs2 in allObjects.items():
                for obj1 in objs1:
                    for obj2 in objs2:
                        if (obj1 != obj2):
                            containerPrefix = "in"
                            if obj2.properties["isContainer"]:
                                containerPrefix = obj2.properties["containerPrefix"]
                            self.addAction("put " + objReferent1 + " " + containerPrefix + " " + objReferent2, ["put", obj1, obj2])

        return self.possibleActions

    #
    #   Interpret actions
    #

    # Take an object from a container
    def actionTake(self, obj):
        # If the object doesn't have a parent container, then it's dangling and something has gone wrong
        if (obj.parentContainer == None):
            return "Something has gone wrong -- that object is dangling in the void.  You can't take that."

        # Take the object from the parent container, and put it in the inventory
        obsStr, objRef, success = obj.parentContainer.takeObjectFromContainer(obj)
        if (success == False):
            return obsStr

        # Add the object to the inventory
        self.agent.addObject(obj)
        return obsStr + " You put the " + obj.getReferents()[0] + " in your inventory."

    # Put an object in a container
    def actionPut(self, objToMove, newContainer):
        # Check that the destination container is a container
        if (newContainer.getProperty("isContainer") == False):
            return "You can't put things in the " + newContainer.getReferents()[0] + "."

        # Enforce that the object must be in the inventory to do anything with it
        if (objToMove.parentContainer != self.agent):
            return "You don't currently have the " + objToMove.getReferents()[0] + " in your inventory."

        # Take the object from it's current container, and put it in the new container.
        # Deep copy the reference to the original parent container, because the object's parent container will be changed when it's taken from the original container
        originalContainer = objToMove.parentContainer
        obsStr1, objRef, success = objToMove.parentContainer.takeObjectFromContainer(objToMove)
        if (success == False):
            return obsStr1

        # Put the object in the new container
        obsStr2, success = newContainer.placeObjectInContainer(objToMove)
        if (success == False):
            # For whatever reason, the object can't be moved into the new container. Put the object back into the original container
            originalContainer.addObject(objToMove)
            return obsStr2

        # Success -- show both take and put observations
        return obsStr1 + "\n" + obsStr2

    # Display agent inventory
    def actionInventory(self):
        # Get the inventory
        inventory = self.agent.contains
        # If the inventory is empty, return a message
        if (len(inventory) == 0):
            return "Your inventory is empty."
        # Otherwise, return a list of the inventory items
        else:
            obsStr = "You have the following items in your inventory:\n"
            for obj in inventory:
                obsStr += "\t" + obj.makeDescriptionStr() + "\n"
            return obsStr

    def actionMove(self, direction):
        room = self.agent.parentContainer.connects[direction]
        self.agent.removeSelfFromContainer()
        room.addObject(self.agent)
        self.current_room = room
        return f"You move {direction}."

    def actionExamine(self, obj):
        # check type of the obj
        if type(obj) == Hole:
            return f"You examine the {obj.name}."
        elif type(obj) == Item:
            return f"You examine the {obj.name}."
        else:
            return f"You can't examine the {obj.name}."

    def actionDig(self, shovel):
        # check shovel type
        if type(shovel) != Shovel:
            return f"You can't dig with {shovel.name}."
        # check if the agent has the shovel in inventory
        if type(shovel.parentContainer) != Agent:
            return f"You should take the {shovel.name} first."
        # check if the shovel has non-zero durability
        if shovel.properties["durability"] == 0:
            return f"You can't dig with {shovel.name} because it is broken."

        # dig
        self.current_room.buried = []
        shovel.properties["durability"] -= 1
        return f"You dig with {shovel.name}."

    # Performs an action in the environment, returns the result (a string observation, the reward, and whether the game is completed).
    def step(self, actionStr):
        self.observationStr = ""
        reward = 0

        # Check to make sure the action is in the possible actions dictionary
        if actionStr not in self.possibleActions:
            self.observationStr = "I don't understand that."
            return (self.observationStr, self.score, reward, self.gameOver, self.gameWon)

        self.numSteps += 1

        # Find the action in the possible actions dictionary
        actions = self.possibleActions[actionStr]
        action = None

        # Check for an ambiguous action (i.e. one that has multiple possible arguments)
        if (len(actions) > 1):
            # If there are multiple possible arguments, for now just choose the first one
            action = actions[0]
        else:
            # Otherwise, also just take the first action in the list of possible actions
            action = actions[0]

        # Interpret the action
        actionVerb = action[0]


        if (actionVerb == "look around"):
            # Look around the environment -- i.e. show the description of the world.
            self.observationStr = self.rootObject.makeDescriptionStr(self.agent.parentContainer)
        elif (actionVerb == "inventory"):
            # Display the agent's inventory
            self.observationStr = self.actionInventory()
        elif (actionVerb == "take"):
            # Take an object from a container
            thingToTake = action[1]
            self.observationStr = self.actionTake(thingToTake)
        elif (actionVerb == "put"):
            # Put an object in a container
            thingToMove = action[1]
            newContainer = action[2]
            self.observationStr = self.actionPut(thingToMove, newContainer)
        elif (actionVerb == "move"):
            # move to a new location
            target_location = action[1]
            self.observationStr = self.actionMove(target_location)
        elif (actionVerb == "examine"):
            # examine an object
            obj = action[1]
            self.observationStr = self.actionExamine(obj)
        elif (actionVerb == "dig"):
            # dig with a shovel
            shovel = action[1]
            self.observationStr = self.actionDig(shovel)
        # Catch-all
        else:
            self.observationStr = "ERROR: Unknown action."

        # Do one tick of the environment
        self.doWorldTick()

        # Calculate the score
        lastScore = self.score
        self.calculateScore()
        reward = self.score - lastScore

        return (self.observationStr, self.score, reward, self.gameOver, self.gameWon)

    # Call the object update for each object in the environment
    def doWorldTick(self):
        # Get a list of all objects in the environment
        allObjects = self.rootObject.getAllContainedObjectsRecursive()
        # Loop through all objects, and call their tick()
        for obj in allObjects:
            obj.tick()

    # Calculate the game score
    def calculateScore(self):

        allObjects = self.rootObject.getAllContainedObjectsRecursive()
        for obj in allObjects:
            if obj.name == "treasure box" and type(obj.parentContainer) == Hole:
                self.score = 1
                self.gameOver = True
                self.gameWon = True




# Main Program
def main():
    # Random seed
    randomSeed = 0

    # Create a new game
    game = TextGame(randomSeed = randomSeed)

    # Get a list of valid actions
    possibleActions = game.generatePossibleActions()
    #print("Possible actions: " + str(possibleActions.keys()))
    print("Task Description: " + game.getTaskDescription())
    print("")
    print("Initial Observation: " + game.observationStr)
    print("")
    print("Type 'help' for a list of possible actions.")
    print("")


    # Main game loop
    #while not game.gameOver:
    while True:

        # Get the player's action
        actionStr = ""
        while ((len(actionStr) == 0) or (actionStr == "help")):
            actionStr = input("> ")
            if (actionStr == "help"):
                print("Possible actions: " + str(possibleActions.keys()))
                print("")
                actionStr = ""
            elif (actionStr == "exit") or (actionStr == "quit"):
                return

        # Perform the action
        observationStr, score, reward, gameOver, gameWon = game.step(actionStr)

        # Get a list of valid actions
        possibleActions = game.generatePossibleActions()

        # Print the current game state
        print("Observation: " + observationStr)
        print("")
        print("Current step: " + str(game.numSteps))
        print("Score: " + str(score))
        print("Reward: " + str(reward))
        print("Game Over: " + str(gameOver))
        print("Game Won: " + str(gameWon))
        print("")
        print("----------------------------------------")

# Run the main program
if __name__ == "__main__":
    main()
```
This code is a text-based simulation that models how to bury a treasure box using a shovel. The environment is a garden, and the task-critical objects are a tool, soil, treasure box, and hole. The critical properties are none. The actions are look, inventory, examine, take/put object, and dig with tool. The distractor items are tool. The high-level solution procedure is take shovel, dig with shovel, take treasure box, put treasure box in hole, and put soil in hole.

The code is based on the metal-detector.py code, which is a text-based simulation that models how to use a metal detector to find a buried metal item on a beach. The environment is a world, and the task-critical objects are room, item, shovel, and metal detector. The critical properties are connects, buried, isMetal, and durability. The actions are look, inventory, take/put objects, move, detect with detector, and dig with shovel. The distractor items are item. The high-level solution procedure is take shovel, take metal detector, explore each place of the map and detects each place with the metal detector, if the detector pings, dig with shovel, take the metal case.

The code is written in Python, and it uses the random module to generate random numbers. The code defines several classes, including GameObject, Container, Room, Item, Shovel, Hole, World, and Agent. The GameObject class is the abstract class for all game objects, and it has several methods, including getProperty, addObject, removeObject, removeSelfFromContainer, getAllContainedObjectsRecursive, containsItemWithName, tick, getReferents, and makeDescriptionStr. The Container class is the abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.), and it has several methods, including openContainer, closeContainer, placeObjectInContainer, takeObjectFromContainer, and makeDescriptionStr. The Room class is a room, and it has several methods, including bury, connect, and makeDescriptionStr. The Item class is an item buried, and it has several methods, including makeDescriptionStr. The Shovel class is a shovel, and it has several methods, including makeDescriptionStr. The Hole class is a hole, and it has several methods, including makeDescriptionStr. The World class is the root object of the game object tree, and it has several methods, including makeDescriptionStr. The Agent class is the agent, and it has several methods, including getReferents and makeDescriptionStr.

The code also defines several functions, including addAction, generatePossibleActions, makeNameToObjectDict, actionTake, actionPut, actionInventory, actionMove, actionExamine, actionDig, and calculateScore. The addAction function adds an action to the possible actions dictionary. The generatePossibleActions function returns a list of valid actions at the current time step. The makeNameToObjectDict function makes a dictionary whose keys are object names (strings), and whose values are lists of object references with those names. The actionTake function takes an object from a container. The actionPut function puts an object in a container. The actionInventory function displays the agent's inventory. The actionMove function moves to a new location. The actionExamine function examines an object. The actionDig function digs with a shovel. The calculateScore function calculates the game score.

The code also defines a TextGame class, which has several methods, including __init__, getTaskDescription, generatePossibleActions, step, and doWorldTick. The __init__ function initializes the game, and it sets the agent/player, game object tree, game score, number of steps, game over flag, game won flag, and last game observation. The getTaskDescription function returns the task description for this game. The generatePossibleActions function returns a list of valid actions at the current time step. The step function performs an action in the environment, and it returns the result (a string observation, the reward, and whether the game is completed). The doWorldTick function calls the object update for each object in the environment.

The code also defines a main function, which is the main program. It creates a new game, and it gets a list of valid actions. It also prints the task description, initial observation, and possible actions. The main game loop gets the player's action, performs the action, and prints the current game state. The code also defines a calculateScore function, which calculates the game score.